// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package solidity

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// KeyedPlonkVerifierMetaData contains all meta data concerning the KeyedPlonkVerifier contract.
var KeyedPlonkVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"serialized_proof\",\"type\":\"uint256[]\"}],\"name\":\"verify_serialized_proof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061405e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063330deb9f14610030575b600080fd5b61004a60048036038101906100459190613a42565b610060565b6040516100579190613ad5565b60405180910390f35b60008061006b6100a6565b9050835181602001511461007e57600080fd5b600061008a85856105bb565b905060006100988284610a67565b905080935050505092915050565b6100ae61357f565b600881600001818152505060018160200181815250506100ed7f2b337de1c8c14f22ec9b9e2f96afef3652627366f8170a0a948dad4ac1bd5e80610ab0565b816040018190525061013f7f16285e1d30a75debc17f08295c2bf1592719d885f469407843d91f430fbb1b227f131ddb04942d583811da6aebe014af9419629f04cf54804f4e4985b92b415cb0610afa565b816060015160006005811061015757610156613af0565b5b60200201819052506101a87f2ed355a40f69fe5809ac7779f2005506f4f131e0cf09e5448e6467eeadb961917e0db9ff7f383b8ba14f33905e6480320c232514c01d1fdf8b3c43fd2ca600c5610afa565b81606001516001600581106101c0576101bf613af0565b5b60200201819052506102127f0e92b2e0527714aafb09898cd3f8e799a1cc6bb34e09cbfa9052394daafff7fe7f2096fb4ab84c97cac4b89a1d3a598fc3e06e33979a49815350406859f19c020d610afa565b816060015160026005811061022a57610229613af0565b5b602002018190525061027c7f2751e1c078e7080e697166f4ecde51b476700d8b144dfb86a72e10152c573bb27f2973c0b588a77600e3e29b226051c11cb85fd3e889e36b9aabc24438fc623e35610afa565b816060015160036005811061029457610293613af0565b5b60200201819052506102e67f280afa14b360c95f6ecfe34ae703a5925892021ea31033c52b13a546159e61947f0ae9b96af332617ab333dcd22bdfbda97b268e8d39747407d675a416d406bb35610afa565b81606001516004600581106102fe576102fd613af0565b5b60200201819052506103507f01d1f8040fcd59bdfc76b65b4febc983b5f4089104d34dd587ac4fa51b67c5067f28b56caed6a4d8e97b9d89e137c92f6a7da7b208855b7aa24ce3a2e536388a85610afa565b816080015160006003811061036857610367613af0565b5b60200201819052506103ba7f097d931e75db2184a84f4fed7a67c85ee0c22245f3509abf562c9229542e94827f1aeb2f23da44bef8006007732a43cacb36fd1cb67fd033b4d608043faa6ff28a610afa565b81608001516001600381106103d2576103d1613af0565b5b60200201819052506104247f24d315fee337c494226a7388f3b329b00a84364193f187f009e8bffcbcf805a77f2f2b02e85410d3f0121122b39aa10ad76d419254f1d87495ba6347b53f9daab9610afa565b816080015160026003811061043c5761043b613af0565b5b602002018190525061044e6005610ab0565b8160a0015160006002811061046657610465613af0565b5b60200201819052506104938160a0015160006002811061048957610488613af0565b5b6020020151610b1f565b8160a001516001600281106104ab576104aa613af0565b5b60200201819052506104fe8160a001516000600281106104ce576104cd613af0565b5b60200201518260a001516001600281106104eb576104ea613af0565b5b6020020151610b3a90919063ffffffff16565b6105b060405180604001604052807f18a5482df8c325151227e5b11d8de8c4d74e32305a12bbd2d0ad7360e048ece481526020017f0472774c9dd66bec3b60e067438914d0041ad2e64d46de2af5fbaac419a6eed081525060405180604001604052807f1abf0cdd5107b6b6b25922b0b5f6ae0fdd08018d3d152bacd51b585acc19106681526020017f21fa160d39fc5bea912e4b7fec9ae3ec91f6d0af3254c4559695a8eb67fe2594815250610b81565b8160c0018190525090565b6105c36135da565b601a8251146105d157600080fd5b825167ffffffffffffffff8111156105ec576105eb6138c9565b5b60405190808252806020026020018201604052801561061a5781602001602082028036833780820191505090505b50816000018190525060005b83518110156106805783818151811061064257610641613af0565b5b60200260200101518260000151828151811061066157610660613af0565b5b602002602001018181525050808061067890613b4e565b915050610626565b506000805b6003811015610719576106d88483815181106106a4576106a3613af0565b5b6020026020010151856001856106ba9190613b96565b815181106106cb576106ca613af0565b5b6020026020010151610ba6565b836020015182600381106106ef576106ee613af0565b5b60200201819052506002826107049190613b96565b9150808061071190613b4e565b915050610685565b506107648382815181106107305761072f613af0565b5b6020026020010151846001846107469190613b96565b8151811061075757610756613af0565b5b6020026020010151610ba6565b82604001819052506002816107799190613b96565b905060005b6003811015610812576107d184838151811061079d5761079c613af0565b5b6020026020010151856001856107b39190613b96565b815181106107c4576107c3613af0565b5b6020026020010151610ba6565b836060015182600381106107e8576107e7613af0565b5b60200201819052506002826107fd9190613b96565b9150808061080a90613b4e565b91505061077e565b5060005b60038110156108835761084284838151811061083557610834613af0565b5b6020026020010151610ab0565b8360800151826003811061085957610858613af0565b5b602002018190525060018261086e9190613b96565b9150808061087b90613b4e565b915050610816565b506108a783828151811061089a57610899613af0565b5b6020026020010151610ab0565b8260a001819052506001816108bc9190613b96565b90506108e18382815181106108d4576108d3613af0565b5b6020026020010151610ab0565b8260c001819052506001816108f69190613b96565b905061091b83828151811061090e5761090d613af0565b5b6020026020010151610ab0565b8260e001819052506001816109309190613b96565b905060005b8261010001515060028110156109aa5761096884838151811061095b5761095a613af0565b5b6020026020010151610ab0565b83610100015182600281106109805761097f613af0565b5b60200201819052506001826109959190613b96565b915080806109a290613b4e565b915050610935565b506109f58382815181106109c1576109c0613af0565b5b6020026020010151846001846109d79190613b96565b815181106109e8576109e7613af0565b5b6020026020010151610ba6565b826101200181905250600281610a0b9190613b96565b9050610a57838281518110610a2357610a22613af0565b5b602002602001015184600184610a399190613b96565b81518110610a4a57610a49613af0565b5b6020026020010151610ba6565b8261014001819052505092915050565b6000610a71613670565b6000610a7e828686610d38565b90506000151581151503610a9757600092505050610aaa565b610aa2828686611209565b905080925050505b92915050565b610ab86136df565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018210610ae457600080fd5b6040518060200160405280838152509050919050565b610b026136f2565b604051806040016040528084815260200183815250905092915050565b610b276136df565b8160000151816000018181525050919050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610b6957610b68613bca565b5b81600001518360000151098260000181815250505050565b610b8961370c565b604051806040016040528084815260200183815250905092915050565b610bae6136f2565b600083148015610bbe5750600082145b15610bdf576040518060400160405280848152602001838152509050610d32565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478310610c0b57600080fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210610c3757600080fd5b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610c6857610c67613bca565b5b838409905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610c9e57610c9d613bca565b5b85860990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610cd257610cd1613bca565b5b85820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610d0657610d05613bca565b5b600382089050808214610d1857600080fd5b604051806040016040528086815260200185815250925050505b92915050565b6000816020015183600001515114610d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7c90613c56565b60405180910390fd5b600182602001511015610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc490613cc2565b60405180910390fd5b6000610dd7611695565b9050610e216040518060400160405280600581526020017f67616d6d61000000000000000000000000000000000000000000000000000000815250826116b990919063ffffffff16565b60005b8360800151506003811015610e7457610e6184608001518260038110610e4d57610e4c613af0565b5b6020020151836116c690919063ffffffff16565b8080610e6c90613b4e565b915050610e24565b50610ea48360600151600060058110610e9057610e8f613af0565b5b6020020151826116c690919063ffffffff16565b610ed38360600151600160058110610ebf57610ebe613af0565b5b6020020151826116c690919063ffffffff16565b610f028360600151600360058110610eee57610eed613af0565b5b6020020151826116c690919063ffffffff16565b610f318360600151600260058110610f1d57610f1c613af0565b5b6020020151826116c690919063ffffffff16565b610f608360600151600460058110610f4c57610f4b613af0565b5b6020020151826116c690919063ffffffff16565b60005b846000015151811015610fb457610fa185600001518281518110610f8a57610f89613af0565b5b60200260200101518361170290919063ffffffff16565b8080610fac90613b4e565b915050610f63565b50610fbe81611734565b856040018190525061100e6040518060400160405280600481526020017f6265746100000000000000000000000000000000000000000000000000000000815250826116b990919063ffffffff16565b61101781611734565b85602001819052506110676040518060400160405280600581526020017f616c706861000000000000000000000000000000000000000000000000000000815250826116b990919063ffffffff16565b61107e8460400151826116c690919063ffffffff16565b61108781611734565b85600001819052506110d76040518060400160405280600481526020017f7a65746100000000000000000000000000000000000000000000000000000000815250826116b990919063ffffffff16565b60005b846060015150600381101561112a576111178560600151826003811061110357611102613af0565b5b6020020151836116c690919063ffffffff16565b808061112290613b4e565b9150506110da565b5061113481611734565b8560a001819052506000836020015167ffffffffffffffff81111561115c5761115b6138c9565b5b60405190808252806020026020018201604052801561118a5781602001602082028036833780820191505090505b50905060005b81518110156111cc57808282815181106111ad576111ac613af0565b5b60200260200101818152505080806111c490613b4e565b915050611190565b506111e581856000015186604001518960a001516118e0565b8660c0018190525060006111fa878787611e5c565b90508093505050509392505050565b600080611217858585612169565b905060006112236126a8565b905060006112316001610ab0565b905060006112428860e001516126cc565b905060006112506001610ab0565b9050611269896060015184610b3a90919063ffffffff16565b61127c85836126f590919063ffffffff16565b60005b88602001515060038110156112fb576112a58a6060015185610b3a90919063ffffffff16565b6112d3848a6020015183600381106112c0576112bf613af0565b5b602002015161270490919063ffffffff16565b94506112e885846126f590919063ffffffff16565b80806112f390613b4e565b91505061127f565b5060005b600188608001515060036113139190613ce2565b811015611387576113318a6060015185610b3a90919063ffffffff16565b61135f848960800151836003811061134c5761134b613af0565b5b602002015161270490919063ffffffff16565b945061137485846126f590919063ffffffff16565b808061137f90613b4e565b9150506112ff565b506113926001610ab0565b925060006113a38960c00151610b1f565b90506113bc8a6060015185610b3a90919063ffffffff16565b6113d38960e001518361271d90919063ffffffff16565b6113e68483610b3a90919063ffffffff16565b6113f9828261272f90919063ffffffff16565b60005b8960800151506003811015611489576114228b6060015186610b3a90919063ffffffff16565b6114508a60800151826003811061143c5761143b613af0565b5b60200201518461271d90919063ffffffff16565b6114638584610b3a90919063ffffffff16565b611476838361272f90919063ffffffff16565b808061148190613b4e565b9150506113fc565b5060005b89610100015150600281101561151c576114b48b6060015186610b3a90919063ffffffff16565b6114e38a610100015182600281106114cf576114ce613af0565b5b60200201518461271d90919063ffffffff16565b6114f68584610b3a90919063ffffffff16565b611509838361272f90919063ffffffff16565b808061151490613b4e565b91505061148d565b506115348960a001518361271d90919063ffffffff16565b61154b8a6080015183610b3a90919063ffffffff16565b61155e828261272f90919063ffffffff16565b61158a61157b8261156d6126a8565b61270490919063ffffffff16565b8461277690919063ffffffff16565b60008390506115bd6115ae8c60a001518c610120015161270490919063ffffffff16565b826126f590919063ffffffff16565b6115d48b60a001518461271d90919063ffffffff16565b6115eb896040015184610b3a90919063ffffffff16565b6116028b6080015184610b3a90919063ffffffff16565b61162c61161d848c610140015161270490919063ffffffff16565b826126f590919063ffffffff16565b600061164a8c608001518c610140015161270490919063ffffffff16565b90506116648b6101200151826126f590919063ffffffff16565b61166d81612785565b611684826116796127e4565b838d60c001516128ae565b985050505050505050509392505050565b61169d613732565b6000816060019063ffffffff16908163ffffffff168152505090565b8082604001819052505050565b8160200151816000015182602001516040516020016116e793929190613da8565b60405160208183030381529060405282602001819052505050565b816020015181604051602001611719929190613de1565b60405160208183030381529060405282602001819052505050565b61173c6136df565b600080836060015163ffffffff16146117d557600283604001518460000151856020015160405160200161177293929190613e7b565b60405160208183030381529060405260405161178e9190613eb0565b602060405180830381855afa1580156117ab573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906117ce9190613ef3565b9050611851565b6002836040015184602001516040516020016117f2929190613f20565b60405160208183030381529060405260405161180e9190613eb0565b602060405180830381855afa15801561182b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061184e9190613ef3565b90505b6001836060018181516118649190613f54565b91509063ffffffff16908163ffffffff16815250508083600001818152505060405180602001604052807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c6118bd9190613f8c565b815250915060405180602001604052806000815250836020018190525050919050565b606060006118ee6001610ab0565b905060006118fc6000610ab0565b9050600061190987610ab0565b9050600061192088876129f790919063ffffffff16565b90506119358482612aa990919063ffffffff16565b600081600001510361194657600080fd5b6000895167ffffffffffffffff811115611963576119626138c9565b5b60405190808252806020026020018201604052801561199c57816020015b6119896136df565b8152602001906001900390816119815790505b50905060008a5167ffffffffffffffff8111156119bc576119bb6138c9565b5b6040519080825280602002602001820160405280156119f557816020015b6119e26136df565b8152602001906001900390816119da5790505b50905060005b8b51811015611b2757611a318c8281518110611a1a57611a19613af0565b5b60200260200101518b6129f790919063ffffffff16565b9550611a6084848381518110611a4a57611a49613af0565b5b602002602001015161271d90919063ffffffff16565b611a8d86848381518110611a7757611a76613af0565b5b6020026020010151610b3a90919063ffffffff16565b611aba89838381518110611aa457611aa3613af0565b5b602002602001015161271d90919063ffffffff16565b611ae786838381518110611ad157611ad0613af0565b5b6020026020010151612aa990919063ffffffff16565b611b1485838381518110611afe57611afd613af0565b5b6020026020010151610b3a90919063ffffffff16565b8080611b1f90613b4e565b9150506119fb565b5060008b5167ffffffffffffffff811115611b4557611b446138c9565b5b604051908082528060200260200182016040528015611b7e57816020015b611b6b6136df565b815260200190600190039081611b635790505b509050611bb8611b8e6001610ab0565b82600081518110611ba257611ba1613af0565b5b602002602001015161271d90919063ffffffff16565b6000600190505b8251811015611c8157611c1b83600183611bd99190613ce2565b81518110611bea57611be9613af0565b5b6020026020010151838381518110611c0557611c04613af0565b5b602002602001015161271d90919063ffffffff16565b611c6e82600183611c2c9190613ce2565b81518110611c3d57611c3c613af0565b5b6020026020010151838381518110611c5857611c57613af0565b5b6020026020010151610b3a90919063ffffffff16565b8080611c7990613b4e565b915050611bbf565b50611cbc8160018351611c949190613ce2565b81518110611ca557611ca4613af0565b5b60200260200101518661271d90919063ffffffff16565b611cf68260018451611cce9190613ce2565b81518110611cdf57611cde613af0565b5b602002602001015186610b3a90919063ffffffff16565b611cff85612b1b565b94506000825190505b6000811115611de257611d24868861271d90919063ffffffff16565b611d5d82600183611d359190613ce2565b81518110611d4657611d45613af0565b5b602002602001015188610b3a90919063ffffffff16565b611d9683600183611d6e9190613ce2565b81518110611d7f57611d7e613af0565b5b602002602001015187610b3a90919063ffffffff16565b611dcf8784600184611da89190613ce2565b81518110611db957611db8613af0565b5b602002602001015161271d90919063ffffffff16565b8080611dda90613fbd565b915050611d08565b5060005b8351811015611e4957611e36838281518110611e0557611e04613af0565b5b6020026020010151858381518110611e2057611e1f613af0565b5b6020026020010151610b3a90919063ffffffff16565b8080611e4190613b4e565b915050611de6565b5082975050505050505050949350505050565b600080611e7183600001518660a00151612b71565b90506000816000015103611e8457600080fd5b611e9b8460c0015182610b3a90919063ffffffff16565b6000611ea76001610ab0565b90506000611eb88660e00151610b1f565b90506000611ec66000610ab0565b905060005b876000015151811015611f6857611f098960c001518281518110611ef257611ef1613af0565b5b60200260200101518361271d90919063ffffffff16565b611f42611f3389600001518381518110611f2657611f25613af0565b5b6020026020010151610ab0565b83610b3a90919063ffffffff16565b611f55828461272f90919063ffffffff16565b8080611f6090613b4e565b915050611ecb565b50611f80886000015184610b3a90919063ffffffff16565b6000611f8f8860a00151610b1f565b905060005b88610100015150600281101561205557611fd38961010001518260028110611fbf57611fbe613af0565b5b60200201518461271d90919063ffffffff16565b611fea8a6020015184610b3a90919063ffffffff16565b6120018a604001518461272f90919063ffffffff16565b61202f8960800151826003811061201b5761201a613af0565b5b60200201518461272f90919063ffffffff16565b6120428383610b3a90919063ffffffff16565b808061204d90613b4e565b915050611f94565b5061206d89604001518361271d90919063ffffffff16565b6120a88860800151600160036120839190613ce2565b6003811061209457612093613af0565b5b60200201518361272f90919063ffffffff16565b6120bb8282610b3a90919063ffffffff16565b6120ce8482610b3a90919063ffffffff16565b6120e1818461272f90919063ffffffff16565b6120f8896000015185610b3a90919063ffffffff16565b61212a8960c0015160008151811061211357612112613af0565b5b60200260200101518361271d90919063ffffffff16565b61213d8483610b3a90919063ffffffff16565b6121508284612aa990919063ffffffff16565b8260000151856000015114955050505050509392505050565b6121716136f2565b6121a28260600151600160036121879190613b96565b6005811061219857612197613af0565b5b60200201516126cc565b905060006121ae6126a8565b905060006121bc6000610ab0565b905060005b600381101561223b57612213866080015182600381106121e4576121e3613af0565b5b602002015186606001518360058110612200576121ff613af0565b5b602002015161270490919063ffffffff16565b925061222883856126f590919063ffffffff16565b808061223390613b4e565b9150506121c1565b5061226b856080015160006003811061225757612256613af0565b5b60200201518261271d90919063ffffffff16565b61229a856080015160016003811061228657612285613af0565b5b602002015182610b3a90919063ffffffff16565b6122c98185606001516003600581106122b6576122b5613af0565b5b602002015161270490919063ffffffff16565b91506122de82846126f590919063ffffffff16565b60006122ed8760a00151610b1f565b9050612306876020015182610b3a90919063ffffffff16565b612335866080015160006003811061232157612320613af0565b5b60200201518261272f90919063ffffffff16565b61234c87604001518261272f90919063ffffffff16565b60005b8560a00151506002811015612431576123758860a001518461271d90919063ffffffff16565b6123a38660a00151826002811061238f5761238e613af0565b5b602002015184610b3a90919063ffffffff16565b6123ba886020015184610b3a90919063ffffffff16565b6123d188604001518461272f90919063ffffffff16565b61240b87608001516001836123e69190613b96565b600381106123f7576123f6613af0565b5b60200201518461272f90919063ffffffff16565b61241e8383610b3a90919063ffffffff16565b808061242990613b4e565b91505061234f565b50612449876000015182610b3a90919063ffffffff16565b61247b8760c0015160008151811061246457612463613af0565b5b60200260200101518361271d90919063ffffffff16565b612492876000015183610b3a90919063ffffffff16565b6124a9876000015183610b3a90919063ffffffff16565b6124bc8282612aa990919063ffffffff16565b60006124c86001610ab0565b905060005b87610100015150600281101561258e576124f489602001518561271d90919063ffffffff16565b612523886101000151826002811061250f5761250e613af0565b5b602002015185610b3a90919063ffffffff16565b61253a89604001518561272f90919063ffffffff16565b6125688860800151826003811061255457612553613af0565b5b60200201518561272f90919063ffffffff16565b61257b8483610b3a90919063ffffffff16565b808061258690613b4e565b9150506124cd565b506125a6886020015182610b3a90919063ffffffff16565b6125bd8760a0015182610b3a90919063ffffffff16565b6125d4886000015182610b3a90919063ffffffff16565b61260f818760800151600160036125eb9190613ce2565b600381106125fc576125fb613af0565b5b602002015161270490919063ffffffff16565b935061263a61262b83896040015161270490919063ffffffff16565b8561277690919063ffffffff16565b61264d84866126f590919063ffffffff16565b61265988888888612bb0565b612670886060015186612eb990919063ffffffff16565b61269d61268e8960800151896040015161270490919063ffffffff16565b866126f590919063ffffffff16565b505050509392505050565b6126b06136f2565b6040518060400160405280600181526020016002815250905090565b6126d46136f2565b81600001518160000181815250508160200151816020018181525050919050565b612700828284612ec8565b5050565b61270c6136f2565b612717838383612ff4565b92915050565b80600001518260000181815250505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061275e5761275d613bca565b5b81600001518360000151088260000181815250505050565b612781828284613081565b5050565b60008160200151036127a75760008160000151146127a257600080fd5b6127e1565b80602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476127d79190613ce2565b8160200181815250505b50565b6127ec61370c565b604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa815250815250905090565b600080600267ffffffffffffffff8111156128cc576128cb6138c9565b5b60405190808252806020026020018201604052801561290557816020015b6128f26136f2565b8152602001906001900390816128ea5790505b5090506000600267ffffffffffffffff811115612925576129246138c9565b5b60405190808252806020026020018201604052801561295e57816020015b61294b61370c565b8152602001906001900390816129435790505b509050868260008151811061297657612975613af0565b5b6020026020010181905250848260018151811061299657612995613af0565b5b602002602001018190525085816000815181106129b6576129b5613af0565b5b602002602001018190525083816001815181106129d6576129d5613af0565b5b60200260200101819052506129eb8282613203565b92505050949350505050565b6129ff6136df565b60006040518060c00160405280602081526020016020815260200160208152602001856000015181526020018481526020017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018152509050612a5f613763565b600060208260c08560055afa905080612a7757600080fd5b604051806020016040528083600060018110612a9657612a95613af0565b5b6020020151815250935050505092915050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180612ad857612ad7613bca565b5b81600001517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001612b089190613ce2565b8360000151088260000181815250505050565b612b236136df565b6000826000015103612b3457600080fd5b612b6a8260027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001612b659190613ce2565b6129f7565b9050919050565b612b796136df565b612b8c83836129f790919063ffffffff16565b9050612baa612b9b6001610ab0565b82612aa990919063ffffffff16565b92915050565b6000612bba611695565b9050612c046040518060400160405280600581526020017f67616d6d61000000000000000000000000000000000000000000000000000000815250826116b990919063ffffffff16565b612c1b8560a001518261354990919063ffffffff16565b6000612c2a8660a00151610b1f565b90506000612c3b8560000151610ab0565b9050612c59612c4a6002610ab0565b8261272f90919063ffffffff16565b612c708160000151836129f790919063ffffffff16565b9150612ca3866060015160016003612c889190613ce2565b60038110612c9957612c98613af0565b5b60200201516126cc565b8760e0018190525060005b60016003612cbc9190613ce2565b811015612d3757612cda838960e00151612eb990919063ffffffff16565b612d2487606001518260026003612cf19190613ce2565b612cfb9190613ce2565b60038110612d0c57612d0b613af0565b5b60200201518960e001516126f590919063ffffffff16565b8080612d2f90613b4e565b915050612cae565b50612d4f8760e00151846116c690919063ffffffff16565b612d6284846116c690919063ffffffff16565b60005b8660200151506003811015612db557612da287602001518260038110612d8e57612d8d613af0565b5b6020020151856116c690919063ffffffff16565b8080612dad90613b4e565b915050612d65565b5060005b60018660800151506003612dcd9190613ce2565b811015612e1557612e0286608001518260038110612dee57612ded613af0565b5b6020020151856116c690919063ffffffff16565b8080612e0d90613b4e565b915050612db9565b50612e1f83611734565b8760600181905250612e6f6040518060400160405280600181526020017f7500000000000000000000000000000000000000000000000000000000000000815250846116b990919063ffffffff16565b612e87866101200151846116c690919063ffffffff16565b612e9f866101400151846116c690919063ffffffff16565b612ea883611734565b876080018190525050505050505050565b612ec4828284612ff4565b5050565b60008260000151148015612ee0575060008260200151145b15612f065782600001518160000181815250508260200151816020018181525050612fef565b60008360000151148015612f1e575060008360200151145b15612f445781600001518160000181815250508160200151816020018181525050612fef565b612f4c613785565b836000015181600060048110612f6557612f64613af0565b5b602002018181525050836020015181600160048110612f8757612f86613af0565b5b602002018181525050826000015181600260048110612fa957612fa8613af0565b5b602002018181525050826020015181600360048110612fcb57612fca613af0565b5b602002018181525050600060408360808460065afa905080612fec57600080fd5b50505b505050565b612ffc6137a7565b83600001518160006003811061301557613014613af0565b5b60200201818152505083602001518160016003811061303757613036613af0565b5b60200201818152505082600001518160026003811061305957613058613af0565b5b602002018181525050600060408360608460075afa90508061307a57600080fd5b5050505050565b60008260000151148015613099575060008260200151145b156130bf57826000015181600001818152505082602001518160200181815250506131fe565b600083600001511480156130d7575060008360200151145b1561312857816000015181600001818152505081602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761311a9190613ce2565b8160200181815250506131fe565b613130613785565b83600001518160006004811061314957613148613af0565b5b60200201818152505083602001518160016004811061316b5761316a613af0565b5b60200201818152505082600001518160026004811061318d5761318c613af0565b5b60200201818152505082602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476131c69190613ce2565b816003600481106131da576131d9613af0565b5b602002018181525050600060408360808460065afa9050806131fb57600080fd5b50505b505050565b6000815183511461321357600080fd5b60008351905060006006826132289190613fe6565b905060008167ffffffffffffffff811115613246576132456138c9565b5b6040519080825280602002602001820160405280156132745781602001602082028036833780820191505090505b50905060005b838110156134f95786818151811061329557613294613af0565b5b6020026020010151600001518260006006846132b19190613fe6565b6132bb9190613b96565b815181106132cc576132cb613af0565b5b6020026020010181815250508681815181106132eb576132ea613af0565b5b6020026020010151602001518260016006846133079190613fe6565b6133119190613b96565b8151811061332257613321613af0565b5b60200260200101818152505085818151811061334157613340613af0565b5b6020026020010151600001516000600281106133605761335f613af0565b5b60200201518260026006846133759190613fe6565b61337f9190613b96565b815181106133905761338f613af0565b5b6020026020010181815250508581815181106133af576133ae613af0565b5b6020026020010151600001516001600281106133ce576133cd613af0565b5b60200201518260036006846133e39190613fe6565b6133ed9190613b96565b815181106133fe576133fd613af0565b5b60200260200101818152505085818151811061341d5761341c613af0565b5b60200260200101516020015160006002811061343c5761343b613af0565b5b60200201518260046006846134519190613fe6565b61345b9190613b96565b8151811061346c5761346b613af0565b5b60200260200101818152505085818151811061348b5761348a613af0565b5b6020026020010151602001516001600281106134aa576134a9613af0565b5b60200201518260056006846134bf9190613fe6565b6134c99190613b96565b815181106134da576134d9613af0565b5b60200260200101818152505080806134f190613b4e565b91505061327a565b50613502613763565b6000602082602086026020860160085afa90508061351f57600080fd5b60008260006001811061353557613534613af0565b5b602002015114159550505050505092915050565b81602001518160000151604051602001613564929190613de1565b60405160208183030381529060405282602001819052505050565b6040518060e0016040528060008152602001600081526020016135a06136df565b81526020016135ad6137c9565b81526020016135ba6137f6565b81526020016135c7613823565b81526020016135d461370c565b81525090565b604051806101600160405280606081526020016135f56137f6565b81526020016136026136f2565b815260200161360f6137f6565b815260200161361c613850565b81526020016136296136df565b81526020016136366136df565b81526020016136436136df565b8152602001613650613823565b815260200161365d6136f2565b815260200161366a6136f2565b81525090565b6040518061010001604052806136846136df565b81526020016136916136df565b815260200161369e6136df565b81526020016136ab6136df565b81526020016136b86136df565b81526020016136c56136df565b8152602001606081526020016136d96136f2565b81525090565b6040518060200160405280600081525090565b604051806040016040528060008152602001600081525090565b604051806040016040528061371f61387d565b815260200161372c61387d565b81525090565b6040518060800160405280600080191681526020016060815260200160608152602001600063ffffffff1681525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060a001604052806005905b6137e06136f2565b8152602001906001900390816137d85790505090565b60405180606001604052806003905b61380d6136f2565b8152602001906001900390816138055790505090565b60405180604001604052806002905b61383a6136df565b8152602001906001900390816138325790505090565b60405180606001604052806003905b6138676136df565b81526020019060019003908161385f5790505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613901826138b8565b810181811067ffffffffffffffff821117156139205761391f6138c9565b5b80604052505050565b600061393361389f565b905061393f82826138f8565b919050565b600067ffffffffffffffff82111561395f5761395e6138c9565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61398881613975565b811461399357600080fd5b50565b6000813590506139a58161397f565b92915050565b60006139be6139b984613944565b613929565b905080838252602082019050602084028301858111156139e1576139e0613970565b5b835b81811015613a0a57806139f68882613996565b8452602084019350506020810190506139e3565b5050509392505050565b600082601f830112613a2957613a286138b3565b5b8135613a398482602086016139ab565b91505092915050565b60008060408385031215613a5957613a586138a9565b5b600083013567ffffffffffffffff811115613a7757613a766138ae565b5b613a8385828601613a14565b925050602083013567ffffffffffffffff811115613aa457613aa36138ae565b5b613ab085828601613a14565b9150509250929050565b60008115159050919050565b613acf81613aba565b82525050565b6000602082019050613aea6000830184613ac6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b5982613975565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b8b57613b8a613b1f565b5b600182019050919050565b6000613ba182613975565b9150613bac83613975565b9250828201905080821115613bc457613bc3613b1f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082825260208201905092915050565b7f6e6f74206d617463680000000000000000000000000000000000000000000000600082015250565b6000613c40600983613bf9565b9150613c4b82613c0a565b602082019050919050565b60006020820190508181036000830152613c6f81613c33565b9050919050565b7f696e7620696e7075740000000000000000000000000000000000000000000000600082015250565b6000613cac600983613bf9565b9150613cb782613c76565b602082019050919050565b60006020820190508181036000830152613cdb81613c9f565b9050919050565b6000613ced82613975565b9150613cf883613975565b9250828203905081811115613d1057613d0f613b1f565b5b92915050565b600081519050919050565b600081905092915050565b60005b83811015613d4a578082015181840152602081019050613d2f565b60008484015250505050565b6000613d6182613d16565b613d6b8185613d21565b9350613d7b818560208601613d2c565b80840191505092915050565b6000819050919050565b613da2613d9d82613975565b613d87565b82525050565b6000613db48286613d56565b9150613dc08285613d91565b602082019150613dd08284613d91565b602082019150819050949350505050565b6000613ded8285613d56565b9150613df98284613d91565b6020820191508190509392505050565b600081519050919050565b600081905092915050565b6000613e2a82613e09565b613e348185613e14565b9350613e44818560208601613d2c565b80840191505092915050565b6000819050919050565b6000819050919050565b613e75613e7082613e50565b613e5a565b82525050565b6000613e878286613e1f565b9150613e938285613e64565b602082019150613ea38284613d56565b9150819050949350505050565b6000613ebc8284613d56565b915081905092915050565b613ed081613e50565b8114613edb57600080fd5b50565b600081519050613eed81613ec7565b92915050565b600060208284031215613f0957613f086138a9565b5b6000613f1784828501613ede565b91505092915050565b6000613f2c8285613e1f565b9150613f388284613d56565b91508190509392505050565b600063ffffffff82169050919050565b6000613f5f82613f44565b9150613f6a83613f44565b9250828201905063ffffffff811115613f8657613f85613b1f565b5b92915050565b6000613f9782613975565b9150613fa283613975565b925082613fb257613fb1613bca565b5b828206905092915050565b6000613fc882613975565b915060008203613fdb57613fda613b1f565b5b600182039050919050565b6000613ff182613975565b9150613ffc83613975565b925082820261400a81613975565b9150828204841483151761402157614020613b1f565b5b509291505056fea26469706673582212209437165beb503e35fd5c30a99efe1838b0eb35aedc6485aaa0fd781d04213b6b64736f6c63430008110033",
}

// KeyedPlonkVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use KeyedPlonkVerifierMetaData.ABI instead.
var KeyedPlonkVerifierABI = KeyedPlonkVerifierMetaData.ABI

// KeyedPlonkVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KeyedPlonkVerifierMetaData.Bin instead.
var KeyedPlonkVerifierBin = KeyedPlonkVerifierMetaData.Bin

// DeployKeyedPlonkVerifier deploys a new Ethereum contract, binding an instance of KeyedPlonkVerifier to it.
func DeployKeyedPlonkVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *KeyedPlonkVerifier, error) {
	parsed, err := KeyedPlonkVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KeyedPlonkVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KeyedPlonkVerifier{KeyedPlonkVerifierCaller: KeyedPlonkVerifierCaller{contract: contract}, KeyedPlonkVerifierTransactor: KeyedPlonkVerifierTransactor{contract: contract}, KeyedPlonkVerifierFilterer: KeyedPlonkVerifierFilterer{contract: contract}}, nil
}

// KeyedPlonkVerifier is an auto generated Go binding around an Ethereum contract.
type KeyedPlonkVerifier struct {
	KeyedPlonkVerifierCaller     // Read-only binding to the contract
	KeyedPlonkVerifierTransactor // Write-only binding to the contract
	KeyedPlonkVerifierFilterer   // Log filterer for contract events
}

// KeyedPlonkVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeyedPlonkVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyedPlonkVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeyedPlonkVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyedPlonkVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeyedPlonkVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyedPlonkVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeyedPlonkVerifierSession struct {
	Contract     *KeyedPlonkVerifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// KeyedPlonkVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeyedPlonkVerifierCallerSession struct {
	Contract *KeyedPlonkVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// KeyedPlonkVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeyedPlonkVerifierTransactorSession struct {
	Contract     *KeyedPlonkVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// KeyedPlonkVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeyedPlonkVerifierRaw struct {
	Contract *KeyedPlonkVerifier // Generic contract binding to access the raw methods on
}

// KeyedPlonkVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeyedPlonkVerifierCallerRaw struct {
	Contract *KeyedPlonkVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// KeyedPlonkVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeyedPlonkVerifierTransactorRaw struct {
	Contract *KeyedPlonkVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeyedPlonkVerifier creates a new instance of KeyedPlonkVerifier, bound to a specific deployed contract.
func NewKeyedPlonkVerifier(address common.Address, backend bind.ContractBackend) (*KeyedPlonkVerifier, error) {
	contract, err := bindKeyedPlonkVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KeyedPlonkVerifier{KeyedPlonkVerifierCaller: KeyedPlonkVerifierCaller{contract: contract}, KeyedPlonkVerifierTransactor: KeyedPlonkVerifierTransactor{contract: contract}, KeyedPlonkVerifierFilterer: KeyedPlonkVerifierFilterer{contract: contract}}, nil
}

// NewKeyedPlonkVerifierCaller creates a new read-only instance of KeyedPlonkVerifier, bound to a specific deployed contract.
func NewKeyedPlonkVerifierCaller(address common.Address, caller bind.ContractCaller) (*KeyedPlonkVerifierCaller, error) {
	contract, err := bindKeyedPlonkVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeyedPlonkVerifierCaller{contract: contract}, nil
}

// NewKeyedPlonkVerifierTransactor creates a new write-only instance of KeyedPlonkVerifier, bound to a specific deployed contract.
func NewKeyedPlonkVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*KeyedPlonkVerifierTransactor, error) {
	contract, err := bindKeyedPlonkVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeyedPlonkVerifierTransactor{contract: contract}, nil
}

// NewKeyedPlonkVerifierFilterer creates a new log filterer instance of KeyedPlonkVerifier, bound to a specific deployed contract.
func NewKeyedPlonkVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*KeyedPlonkVerifierFilterer, error) {
	contract, err := bindKeyedPlonkVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeyedPlonkVerifierFilterer{contract: contract}, nil
}

// bindKeyedPlonkVerifier binds a generic wrapper to an already deployed contract.
func bindKeyedPlonkVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeyedPlonkVerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyedPlonkVerifier.Contract.KeyedPlonkVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyedPlonkVerifier.Contract.KeyedPlonkVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyedPlonkVerifier.Contract.KeyedPlonkVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyedPlonkVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyedPlonkVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyedPlonkVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifySerializedProof is a free data retrieval call binding the contract method 0x330deb9f.
//
// Solidity: function verify_serialized_proof(uint256[] public_inputs, uint256[] serialized_proof) view returns(bool)
func (_KeyedPlonkVerifier *KeyedPlonkVerifierCaller) VerifySerializedProof(opts *bind.CallOpts, public_inputs []*big.Int, serialized_proof []*big.Int) (bool, error) {
	var out []interface{}
	err := _KeyedPlonkVerifier.contract.Call(opts, &out, "verify_serialized_proof", public_inputs, serialized_proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySerializedProof is a free data retrieval call binding the contract method 0x330deb9f.
//
// Solidity: function verify_serialized_proof(uint256[] public_inputs, uint256[] serialized_proof) view returns(bool)
func (_KeyedPlonkVerifier *KeyedPlonkVerifierSession) VerifySerializedProof(public_inputs []*big.Int, serialized_proof []*big.Int) (bool, error) {
	return _KeyedPlonkVerifier.Contract.VerifySerializedProof(&_KeyedPlonkVerifier.CallOpts, public_inputs, serialized_proof)
}

// VerifySerializedProof is a free data retrieval call binding the contract method 0x330deb9f.
//
// Solidity: function verify_serialized_proof(uint256[] public_inputs, uint256[] serialized_proof) view returns(bool)
func (_KeyedPlonkVerifier *KeyedPlonkVerifierCallerSession) VerifySerializedProof(public_inputs []*big.Int, serialized_proof []*big.Int) (bool, error) {
	return _KeyedPlonkVerifier.Contract.VerifySerializedProof(&_KeyedPlonkVerifier.CallOpts, public_inputs, serialized_proof)
}
