// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package solidity

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// KeyedPlonkVerifierMetaData contains all meta data concerning the KeyedPlonkVerifier contract.
var KeyedPlonkVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"serialized_proof\",\"type\":\"uint256[]\"}],\"name\":\"verify_serialized_proof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"330deb9f": "verify_serialized_proof(uint256[],uint256[])",
	},
	Bin: "0x608060405234801561001057600080fd5b50612de2806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063330deb9f14610030575b600080fd5b61004361003e366004612b21565b610057565b604051901515815260200160405180910390f35b60008061006261009b565b9050835181602001511461007557600080fd5b6000610081858561046a565b9050600061008f82846107ce565b93505050505b92915050565b6100a36127cb565b60088152600160208201526100d77f2b337de1c8c14f22ec9b9e2f96afef3652627366f8170a0a948dad4ac1bd5e80610890565b60408201526101267f0acf56fa2aa95be410335f955611076a1b63b63a9dd043be6721f5f497b1e0e17f11eedf12fbe7c75dd823776253f67b6706c9e55b7b9e48f57e00b206c2546af66108cb565b6060820151526101767f09587a2146816f918c2746a8b614add76f211b4c9885c0d0c89acb6ae06cf3db7f1ad28347e608dff8255d3c5aafea13edb93e0473d22a068b597abea63c8ba82e6108cb565b6060820151602001526101c97f0a6ea508024287693af26bc9b849f8367446aeb66c6e6be5bee8bb35bd7081737f2125ad5418766ce9e883f8c1ec1a443292b40d1a73c0ddc4363f5f068620f21b6108cb565b60608201516040015261021c7f2f062a4f76cb9698a503a70332de264bb2eafe83512c02990b4f033ac57098a67f08e6f1bb5b6ed784a61ae4424bc6adcb1fb88798c6e2acb0938b106d2fe098076108cb565b606082810151015261026e7f1b8292d89a32db73d938702c960b89e72e8820b097cabcae05b3ef47a9a5183a7f06f497a92f86d3b5b55631c6396db83158d0526307ea35fb6006f6f3218a55456108cb565b6060820151608001526102c17f2c03f037487849b5b4c3ba3b4de918bae29cdf64a89f58287e0bd2f74add975e7f16136e3c9066a65b89dbce452b9f7aa83f69e1eaf641c4514c34babcadacf7916108cb565b6080820151526103117f143d94a90beaaa37ba0a8811d36f09ebd1765347457b5e3a8b3346c7725aff447f14c89057a6c47d3a832b7b4f8ed35fb3e7ec7e8b73e7ea36cb402767f7c3be8a6108cb565b6080820151602001526103647f0ae454f6dfd76df7e5e1be874237e9d71b2f9e12ae5fe46eb69acc5ba154e52d7f0e6a861d5ec480725d7f49dfefdd94ed5153c5c98f28c7de263aeb08aeae10446108cb565b6080820151604001526103776005610890565b60a0820180519190915280515160408051602080820190925260008152915182528251810191909152905180519101516103b0916108f6565b61046260405180604001604052807f071683701172aec98237430a75ff5650bb6dbf53f92fc6237e96df0002d8547581526020017f2630d68a48b2bd8501d6d65e436d8c7ec6e5932cc873d27e0c1306f3da7f077481525060405180604001604052807f22982f39a0cdcdf6090c43b1229c4f133ae1c980be946176866d4763b3724ebd81526020017f023be5bb4186231e9ba72053e3b527188aeb3acdcf6406cdcf576203a1c2ab46815250610910565b60c082015290565b610472612833565b601a82511461048057600080fd5b825167ffffffffffffffff81111561049a5761049a612a7b565b6040519080825280602002602001820160405280156104c3578160200160208202803683370190505b50815260005b835181101561051f578381815181106104e4576104e4612b85565b60200260200101518260000151828151811061050257610502612b85565b60209081029190910101528061051781612bb1565b9150506104c9565b506000805b60038110156105af5761057584838151811061054257610542612b85565b6020026020010151858460016105589190612bca565b8151811061056857610568612b85565b6020026020010151610918565b8360200151826003811061058b5761058b612b85565b602002015261059b600283612bca565b9150806105a781612bb1565b915050610524565b506105db8382815181106105c5576105c5612b85565b6020026020010151848360016105589190612bca565b60408301526105eb600282612bca565b905060005b60038110156106485761060e84838151811061054257610542612b85565b8360600151826003811061062457610624612b85565b6020020152610634600283612bca565b91508061064081612bb1565b9150506105f0565b5060005b60038110156106b15761067784838151811061066a5761066a612b85565b6020026020010151610890565b8360800151826003811061068d5761068d612b85565b602002015261069d600183612bca565b9150806106a981612bb1565b91505061064c565b506106c783828151811061066a5761066a612b85565b60a08301526106d7600182612bca565b90506106ee83828151811061066a5761066a612b85565b60c08301526106fe600182612bca565b905061071583828151811061066a5761066a612b85565b60e0830152610725600182612bca565b905060005b60028110156107835761074884838151811061066a5761066a612b85565b836101000151826002811061075f5761075f612b85565b602002015261076f600183612bca565b91508061077b81612bb1565b91505061072a565b506107998382815181106105c5576105c5612b85565b6101208301526107aa600282612bca565b90506107c18382815181106105c5576105c5612b85565b6101408301525092915050565b60006108586040805161012081018252600061010082018181528252825160208082018552828252808401919091528351808201855282815283850152835180820185528281526060808501919091528451808301865283815260808501528451808301865283815260a085015260c084015283518085019094528184528301529060e082015290565b6000610865828686610a06565b905080151560000361087c57600092505050610095565b610887828686610d69565b95945050505050565b604080516020810190915260008152600080516020612d8d83398151915282106108b957600080fd5b50604080516020810190915290815290565b60408051808201909152600080825260208201525b5060408051808201909152918252602082015290565b600080516020612d8d833981519152815183510990915250565b6108e061292c565b604080518082019091526000808252602082015282158015610938575081155b15610959576040518060400160405280848152602001838152509050610095565b600080516020612d6d833981519152831061097357600080fd5b600080516020612d6d833981519152821061098d57600080fd5b6000600080516020612d6d83398151915283840990506000600080516020612d6d8339815191528586099050600080516020612d6d8339815191528582099050600080516020612d6d8339815191526003820890508082146109ee57600080fd5b50506040805180820190915292835250602082015290565b602081015182515160009114610a4f5760405162461bcd60e51b81526020600482015260096024820152680dcdee840dac2e8c6d60bb1b60448201526064015b60405180910390fd5b600182602001511015610a905760405162461bcd60e51b81526020600482015260096024820152681a5b9d881a5b9c1d5d60ba1b6044820152606401610a46565b604080516080810182526000808252606060208084018290528385018281529184018390528451808601909552600585526467616d6d6160d81b9085015292909252905b6003811015610b1457610b0284608001518260038110610af657610af6612b85565b6020020151839061111d565b80610b0c81612bb1565b915050610ad4565b506060830151610b2d9060005b6020020151829061111d565b6060830151610b3d906001610b21565b6060830151610b4d906003610b21565b6060830151610b5d906002610b21565b6060830151610b6d906004610b21565b60005b845151811015610bbc57610baa85600001518281518110610b9357610b93612b85565b60200260200101518361115190919063ffffffff16565b80610bb481612bb1565b915050610b70565b50610bc681611166565b6040868101919091528051808201825260048152636265746160e01b602082015290820152610bf481611166565b8560200181905250610c2c60405180604001604052806005815260200164616c70686160d81b8152508261111590919063ffffffff16565b6040840151610c3c90829061111d565b610c4581611166565b855260408051808201825260048152637a65746160e01b60208201529082015260005b6003811015610c9c57610c8a85606001518260038110610af657610af6612b85565b80610c9481612bb1565b915050610c68565b50610ca681611166565b60a0860152602083015160009067ffffffffffffffff811115610ccb57610ccb612a7b565b604051908082528060200260200182016040528015610cf4578160200160208202803683370190505b50905060005b8151811015610d335780828281518110610d1657610d16612b85565b602090810291909101015280610d2b81612bb1565b915050610cfa565b50610d4c81856000015186604001518960a001516112e6565b60c08701526000610d5e87878761178a565b979650505050505050565b600080610d778585856119cb565b90506000610da7604080518082018252600080825260209182015281518083019092526001825260029082015290565b90506000610db56001610890565b60e0880151604080518082019091526000808252602080830182815284518452930151909252919250610de86001610890565b9050610e018960600151846108f690919063ffffffff16565b610e0b8286611d9a565b60005b6003811015610e6a5760608a0151610e279085906108f6565b610e4c848a602001518360038110610e4157610e41612b85565b602002015190611da9565b9450610e588386611d9a565b80610e6281612bb1565b915050610e0e565b5060005b610e7a60016003612bdd565b811015610ec95760608a0151610e919085906108f6565b610eab8489608001518360038110610e4157610e41612b85565b9450610eb78386611d9a565b80610ec181612bb1565b915050610e6e565b50610ed46001610890565b92506000610ef68960c001516040805160208101909152600081529051815290565b9050610f0f8a60600151856108f690919063ffffffff16565b60e0890151518252610f2182856108f6565b610f2b8183611dcd565b60005b6003811015610f905760608b0151610f479086906108f6565b610f6a8a608001518260038110610f6057610f60612b85565b6020020151518452565b610f7483866108f6565b610f7e8284611dcd565b80610f8881612bb1565b915050610f2e565b5060005b6002811015610fed5760608b0151610fad9086906108f6565b610fc78a61010001518260028110610f6057610f60612b85565b610fd183866108f6565b610fdb8284611dcd565b80610fe581612bb1565b915050610f94565b5060a089015151825260808a01516110069083906108f6565b6110108183611dcd565b61105061104982611043604080518082018252600080825260209182015281518083019092526001825260029082015290565b90611da9565b8490611de7565b60a08a01516101208a015184916110719161106a91611da9565b8290611d9a565b60a08b015151835260408901516110899084906108f6565b60808b01516110999084906108f6565b6101408a01516110ad9061106a9085611da9565b60006110cb8c608001518c6101400151611da990919063ffffffff16565b90506110e58b610120015182611d9a90919063ffffffff16565b6110ee81611df2565b611105826110fa611e32565b838d60c00151611ef2565b9c9b505050505050505050505050565b604090910152565b6020808301518251838301516040516111369401612c14565b60405160208183030381529060405282602001819052505050565b60208083015160405161113692849101612c3b565b60408051602081019091526000808252606083015163ffffffff161561120a5760028360400151846000015185602001516040516020016111a993929190612c5d565b60408051601f19818403018152908290526111c391612c94565b602060405180830381855afa1580156111e0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112039190612cb0565b9050611284565b600283604001518460200151604051602001611227929190612cc9565b60408051601f198184030181529082905261124191612c94565b602060405180830381855afa15801561125e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112819190612cb0565b90505b6001836060018181516112979190612cf8565b63ffffffff169052508083526040805160208101909152806112c7600080516020612d8d83398151915284612d1c565b9052604080516020808201909252600081529401939093525090919050565b606060006112f46001610890565b905060006113026000610890565b9050600061130f87610890565b9050600061131d8689611ff2565b90506113298185612071565b805160000361133757600080fd5b6000895167ffffffffffffffff81111561135357611353612a7b565b60405190808252806020026020018201604052801561139357816020015b6040805160208101909152600081528152602001906001900390816113715790505b50905060008a5167ffffffffffffffff8111156113b2576113b2612a7b565b6040519080825280602002602001820160405280156113f257816020015b6040805160208101909152600081528152602001906001900390816113d05790505b50905060005b8b518110156114f15761142d8c828151811061141657611416612b85565b60200260200101518b611ff290919063ffffffff16565b955061145b8484838151811061144557611445612b85565b6020026020010151611dc890919063ffffffff16565b6114878684838151811061147157611471612b85565b60200260200101516108f690919063ffffffff16565b61149d8983838151811061144557611445612b85565b6114c9868383815181106114b3576114b3612b85565b602002602001015161207190919063ffffffff16565b6114df8583838151811061147157611471612b85565b806114e981612bb1565b9150506113f8565b5060008b5167ffffffffffffffff81111561150e5761150e612a7b565b60405190808252806020026020018201604052801561154e57816020015b60408051602081019091526000815281526020019060019003908161152c5790505b50905061157161155e6001610890565b8260008151811061144557611445612b85565b60015b8251811015611601576115b68361158c600184612bdd565b8151811061159c5761159c612b85565b602002602001015183838151811061144557611445612b85565b6115ef826115c5600184612bdd565b815181106115d5576115d5612b85565b602002602001015183838151811061147157611471612b85565b806115f981612bb1565b915050611574565b5061163b81600183516116149190612bdd565b8151811061162457611624612b85565b602002602001015186611dc890919063ffffffff16565b611674826001845161164d9190612bdd565b8151811061165d5761165d612b85565b6020026020010151866108f690919063ffffffff16565b61167d856120a3565b82519095505b801561172b57855187526116c38261169c600184612bdd565b815181106116ac576116ac612b85565b6020026020010151886108f690919063ffffffff16565b6116f9836116d2600184612bdd565b815181106116e2576116e2612b85565b6020026020010151876108f690919063ffffffff16565b6117198784611709600185612bdd565b8151811061144557611445612b85565b8061172381612d3e565b915050611683565b5060005b83518110156117795761176783828151811061174d5761174d612b85565b602002602001015185838151811061147157611471612b85565b8061177181612bb1565b91505061172f565b50919b9a5050505050505050505050565b60008061179f83600001518660a001516120e2565b80519091506000036117b057600080fd5b60c08401516117c09082906108f6565b60006117cc6001610890565b905060006117ee8660e001516040805160208101909152600081529051815290565b905060006117fc6000610890565b905060005b87515181101561187a5761183b8960c00151828151811061182457611824612b85565b602002602001015183611dc890919063ffffffff16565b61185e6118578960000151838151811061066a5761066a612b85565b83906108f6565b6118688383611dcd565b8061187281612bb1565b915050611801565b5087516118889084906108f6565b60a08701516040805160208101909152600080825291518152905b6002811015611927576118c68961010001518260028110610f6057610f60612b85565b60208a01516118d69084906108f6565b60408a01516118e6908490611dcd565b61190b896080015182600381106118ff576118ff612b85565b60200201518490611dcd565b61191582846108f6565b8061191f81612bb1565b9150506118a3565b50604089015151825260808801516119619061194560016003612bdd565b6003811061195557611955612b85565b60200201518390611dcd565b61196b81836108f6565b61197581856108f6565b61197f8382611dcd565b885161198c9085906108f6565b6119a68960c0015160008151811061182457611824612b85565b6119b082856108f6565b6119ba8383612071565b505051915190911495945050505050565b60408051808201909152600080825260208201526060820151611a2f906119f460036001612bca565b60058110611a0457611a04612b85565b6020020151604080518082019091526000808252602080830191825283518352929092015190915290565b90506000611a5f604080518082018252600080825260209182015281518083019092526001825260029082015290565b90506000611a6d6000610890565b905060005b6003811015611acd57611aaf86608001518260038110611a9457611a94612b85565b602002015186606001518360058110610e4157610e41612b85565b9250611abb8484611d9a565b80611ac581612bb1565b915050611a72565b50608085018051515182525160200151611ae89082906108f6565b6060840151611afa9082906003610e41565b9150611b068383611d9a565b60a08601516040805160208082019092526000815291518252870151611b2d9082906108f6565b608086015151611b3e908290611dcd565b6040870151611b4e908290611dcd565b60005b6002811015611be75760a0880151518352611b878660a001518260028110611b7b57611b7b612b85565b602002015184906108f6565b6020880151611b979084906108f6565b6040880151611ba7908490611dcd565b6080870151611bcb90611bbb836001612bca565b600381106118ff576118ff612b85565b611bd582846108f6565b80611bdf81612bb1565b915050611b51565b508651611bf59082906108f6565b611c0f8760c0015160008151811061182457611824612b85565b8651611c1c9083906108f6565b8651611c299083906108f6565b611c338183612071565b6000611c3f6001610890565b905060005b6002811015611ccc576020890151518452611c7b8861010001518260028110611c6f57611c6f612b85565b602002015185906108f6565b6040890151611c8b908590611dcd565b611cb088608001518260038110611ca457611ca4612b85565b60200201518590611dcd565b611cba82856108f6565b80611cc481612bb1565b915050611c44565b506020880151611cdd9082906108f6565b60a0870151611ced9082906108f6565b8751611cfa9082906108f6565b611d2181876080015160016003611d119190612bdd565b60038110610e4157610e41612b85565b9350611d44611d3d838960400151611da990919063ffffffff16565b8590611de7565b611d4e8585611d9a565b611d5a88888888612111565b6060880151611d6a90869061235b565b611d8f611d8889608001518960400151611da990919063ffffffff16565b8690611d9a565b505050509392505050565b611da5828284612366565b5050565b60408051808201909152600080825260208201526100958383836123fd565b519052565b600080516020612d8d833981519152815183510890915250565b611da5828284612438565b8060200151600003611e0d57805115611e0a57600080fd5b50565b6020810151611e2a90600080516020612d6d833981519152612bdd565b602090910152565b611e3a61292c565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b82527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60208381019190915281019190915290565b60408051600280825260608201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081611f0d5750506040805160028082526060820190925291925060009190602082015b611f5761292c565b815260200190600190039081611f4f5790505090508682600081518110611f8057611f80612b85565b60200260200101819052508482600181518110611f9f57611f9f612b85565b60200260200101819052508581600081518110611fbe57611fbe612b85565b60200260200101819052508381600181518110611fdd57611fdd612b85565b6020026020010181905250610d5e82826124e2565b604080516020808201835260008252825160c081018452818152808201829052928301528351606083015260808201839052600080516020612d8d83398151915260a08301529061204161294c565b600060208260c08560055afa90508061205957600080fd5b50604080516020810190915290518152949350505050565b600080516020612d8d833981519152815161209a90600080516020612d8d833981519152612bdd565b83510890915250565b60408051602081019091526000815281516000036120c057600080fd5b610095826120dd6002600080516020612d8d833981519152612bdd565b611ff2565b6040805160208101909152600081526120fb8284611ff2565b905061009561210a6001610890565b8290612071565b60408051608081018252600080825260606020808401829052838501828152918401929092528351808501909452600584526467616d6d6160d81b918401919091529190915260a08501516121679082906127b6565b60a08501516040805160208101909152600080825291518152845190919061218e90610890565b90506121a461219d6002610890565b8290611dcd565b80516121b1908390611ff2565b91506121d98660600151600160036121c99190612bdd565b60038110611a0457611a04612b85565b60e088015260005b6121ed60016003612bdd565b8110156122555760e0880151612203908461235b565b6060870151612243908261221960026003612bdd565b6122239190612bdd565b6003811061223357612233612b85565b602002015160e08a015190611d9a565b8061224d81612bb1565b9150506121e1565b5060e087015161226690849061111d565b612270838561111d565b60005b60038110156122b3576122a18760200151826003811061229557612295612b85565b6020020151859061111d565b806122ab81612bb1565b915050612273565b5060005b6122c360016003612bdd565b8110156122f5576122e38660800151826003811061229557612295612b85565b806122ed81612bb1565b9150506122b7565b506122ff83611166565b606088015260408051808201825260018152607560f81b60208201529084015261012086015161233090849061111d565b61014086015161234190849061111d565b61234a83611166565b876080018190525050505050505050565b611da58282846123fd565b815115801561237757506020820151155b1561238f578251815260209283015192019190915250565b82511580156123a057506020830151155b156123b5578151815260209182015191015250565b6123bd61296a565b8351815260208085015181830152835160408301528301518160035b6020020152600060408360808460065afa9050806123f657600080fd5b5050505050565b612405612988565b835181526020840151816001602002015282518160026020020152600060408360608460075afa9050806123f657600080fd5b815115801561244957506020820151155b15612461578251815260209283015192019190915250565b825115801561247257506020830151155b156124a25781518152602082015161249890600080516020612d6d833981519152612bdd565b6020909101525050565b6124aa61296a565b8351815260208085015181830152835160408301528301516124da90600080516020612d6d833981519152612bdd565b8160036123d9565b600081518351146124f257600080fd5b82516000612501826006612d55565b905060008167ffffffffffffffff81111561251e5761251e612a7b565b604051908082528060200260200182016040528015612547578160200160208202803683370190505b50905060005b838110156127825786818151811061256757612567612b85565b602002602001015160000151828260066125819190612d55565b61258c906000612bca565b8151811061259c5761259c612b85565b6020026020010181815250508681815181106125ba576125ba612b85565b602002602001015160200151828260066125d49190612d55565b6125df906001612bca565b815181106125ef576125ef612b85565b60200260200101818152505085818151811061260d5761260d612b85565b6020908102919091010151515182612626836006612d55565b612631906002612bca565b8151811061264157612641612b85565b60200260200101818152505085818151811061265f5761265f612b85565b6020908102919091018101515101518261267a836006612d55565b612685906003612bca565b8151811061269557612695612b85565b6020026020010181815250508581815181106126b3576126b3612b85565b6020026020010151602001516000600281106126d1576126d1612b85565b6020020151826126e2836006612d55565b6126ed906004612bca565b815181106126fd576126fd612b85565b60200260200101818152505085818151811061271b5761271b612b85565b60200260200101516020015160016002811061273957612739612b85565b60200201518261274a836006612d55565b612755906005612bca565b8151811061276557612765612b85565b60209081029190910101528061277a81612bb1565b91505061254d565b5061278b61294c565b6000602082602086026020860160085afa9050806127a857600080fd5b505115159695505050505050565b60208083015182516040516111369301612c3b565b6040518060e0016040528060008152602001600081526020016127fa6040518060200160405280600081525090565b81526020016128076129a6565b81526020016128146129df565b8152602001612821612a08565b815260200161282e61292c565b905290565b6040518061016001604052806060815260200161284e6129df565b8152602001612870604051806040016040528060008152602001600081525090565b815260200161287d6129df565b815260200161288a612a3c565b81526020016128a56040518060200160405280600081525090565b81526020016128c06040518060200160405280600081525090565b81526020016128db6040518060200160405280600081525090565b81526020016128e8612a08565b815260200161290a604051806040016040528060008152602001600081525090565b815260200161282e604051806040016040528060008152602001600081525090565b604051806040016040528061293f612a5d565b815260200161282e612a5d565b60405180602001604052806001906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6040518060a001604052806005905b60408051808201909152600080825260208201528152602001906001900390816129b55790505090565b6040805160a08101909152600060608201818152608083019190915281526002602082016129b5565b60405180604001604052806002905b604080516020810190915260008152815260200190600190039081612a175790505090565b60408051608081019091526000606082019081528152600260208201612a17565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612aa257600080fd5b8135602067ffffffffffffffff80831115612abf57612abf612a7b565b8260051b604051601f19603f83011681018181108482111715612ae457612ae4612a7b565b604052938452858101830193838101925087851115612b0257600080fd5b83870191505b84821015610d5e57813583529183019190830190612b08565b60008060408385031215612b3457600080fd5b823567ffffffffffffffff80821115612b4c57600080fd5b612b5886838701612a91565b93506020850135915080821115612b6e57600080fd5b50612b7b85828601612a91565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612bc357612bc3612b9b565b5060010190565b8082018082111561009557610095612b9b565b8181038181111561009557610095612b9b565b60005b83811015612c0b578181015183820152602001612bf3565b50506000910152565b60008451612c26818460208901612bf0565b91909101928352506020820152604001919050565b60008351612c4d818460208801612bf0565b9190910191825250602001919050565b60008451612c6f818460208901612bf0565b82018481528351612c87816020808501908801612bf0565b0160200195945050505050565b60008251612ca6818460208701612bf0565b9190910192915050565b600060208284031215612cc257600080fd5b5051919050565b60008351612cdb818460208801612bf0565b835190830190612cef818360208801612bf0565b01949350505050565b63ffffffff818116838216019080821115612d1557612d15612b9b565b5092915050565b600082612d3957634e487b7160e01b600052601260045260246000fd5b500690565b600081612d4d57612d4d612b9b565b506000190190565b808202811582820484141761009557610095612b9b56fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4730644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220305b1ce2f347c29c96bdfa1235ddaca627fddc623f92af2d46db1041f9c2e6a964736f6c63430008110033",
}

// KeyedPlonkVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use KeyedPlonkVerifierMetaData.ABI instead.
var KeyedPlonkVerifierABI = KeyedPlonkVerifierMetaData.ABI

// Deprecated: Use KeyedPlonkVerifierMetaData.Sigs instead.
// KeyedPlonkVerifierFuncSigs maps the 4-byte function signature to its string representation.
var KeyedPlonkVerifierFuncSigs = KeyedPlonkVerifierMetaData.Sigs

// KeyedPlonkVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KeyedPlonkVerifierMetaData.Bin instead.
var KeyedPlonkVerifierBin = KeyedPlonkVerifierMetaData.Bin

// DeployKeyedPlonkVerifier deploys a new Ethereum contract, binding an instance of KeyedPlonkVerifier to it.
func DeployKeyedPlonkVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *KeyedPlonkVerifier, error) {
	parsed, err := KeyedPlonkVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KeyedPlonkVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KeyedPlonkVerifier{KeyedPlonkVerifierCaller: KeyedPlonkVerifierCaller{contract: contract}, KeyedPlonkVerifierTransactor: KeyedPlonkVerifierTransactor{contract: contract}, KeyedPlonkVerifierFilterer: KeyedPlonkVerifierFilterer{contract: contract}}, nil
}

// KeyedPlonkVerifier is an auto generated Go binding around an Ethereum contract.
type KeyedPlonkVerifier struct {
	KeyedPlonkVerifierCaller     // Read-only binding to the contract
	KeyedPlonkVerifierTransactor // Write-only binding to the contract
	KeyedPlonkVerifierFilterer   // Log filterer for contract events
}

// KeyedPlonkVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeyedPlonkVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyedPlonkVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeyedPlonkVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyedPlonkVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeyedPlonkVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyedPlonkVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeyedPlonkVerifierSession struct {
	Contract     *KeyedPlonkVerifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// KeyedPlonkVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeyedPlonkVerifierCallerSession struct {
	Contract *KeyedPlonkVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// KeyedPlonkVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeyedPlonkVerifierTransactorSession struct {
	Contract     *KeyedPlonkVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// KeyedPlonkVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeyedPlonkVerifierRaw struct {
	Contract *KeyedPlonkVerifier // Generic contract binding to access the raw methods on
}

// KeyedPlonkVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeyedPlonkVerifierCallerRaw struct {
	Contract *KeyedPlonkVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// KeyedPlonkVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeyedPlonkVerifierTransactorRaw struct {
	Contract *KeyedPlonkVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeyedPlonkVerifier creates a new instance of KeyedPlonkVerifier, bound to a specific deployed contract.
func NewKeyedPlonkVerifier(address common.Address, backend bind.ContractBackend) (*KeyedPlonkVerifier, error) {
	contract, err := bindKeyedPlonkVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KeyedPlonkVerifier{KeyedPlonkVerifierCaller: KeyedPlonkVerifierCaller{contract: contract}, KeyedPlonkVerifierTransactor: KeyedPlonkVerifierTransactor{contract: contract}, KeyedPlonkVerifierFilterer: KeyedPlonkVerifierFilterer{contract: contract}}, nil
}

// NewKeyedPlonkVerifierCaller creates a new read-only instance of KeyedPlonkVerifier, bound to a specific deployed contract.
func NewKeyedPlonkVerifierCaller(address common.Address, caller bind.ContractCaller) (*KeyedPlonkVerifierCaller, error) {
	contract, err := bindKeyedPlonkVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeyedPlonkVerifierCaller{contract: contract}, nil
}

// NewKeyedPlonkVerifierTransactor creates a new write-only instance of KeyedPlonkVerifier, bound to a specific deployed contract.
func NewKeyedPlonkVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*KeyedPlonkVerifierTransactor, error) {
	contract, err := bindKeyedPlonkVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeyedPlonkVerifierTransactor{contract: contract}, nil
}

// NewKeyedPlonkVerifierFilterer creates a new log filterer instance of KeyedPlonkVerifier, bound to a specific deployed contract.
func NewKeyedPlonkVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*KeyedPlonkVerifierFilterer, error) {
	contract, err := bindKeyedPlonkVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeyedPlonkVerifierFilterer{contract: contract}, nil
}

// bindKeyedPlonkVerifier binds a generic wrapper to an already deployed contract.
func bindKeyedPlonkVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KeyedPlonkVerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyedPlonkVerifier.Contract.KeyedPlonkVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyedPlonkVerifier.Contract.KeyedPlonkVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyedPlonkVerifier.Contract.KeyedPlonkVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyedPlonkVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyedPlonkVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyedPlonkVerifier *KeyedPlonkVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyedPlonkVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifySerializedProof is a free data retrieval call binding the contract method 0x330deb9f.
//
// Solidity: function verify_serialized_proof(uint256[] public_inputs, uint256[] serialized_proof) view returns(bool)
func (_KeyedPlonkVerifier *KeyedPlonkVerifierCaller) VerifySerializedProof(opts *bind.CallOpts, public_inputs []*big.Int, serialized_proof []*big.Int) (bool, error) {
	var out []interface{}
	err := _KeyedPlonkVerifier.contract.Call(opts, &out, "verify_serialized_proof", public_inputs, serialized_proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySerializedProof is a free data retrieval call binding the contract method 0x330deb9f.
//
// Solidity: function verify_serialized_proof(uint256[] public_inputs, uint256[] serialized_proof) view returns(bool)
func (_KeyedPlonkVerifier *KeyedPlonkVerifierSession) VerifySerializedProof(public_inputs []*big.Int, serialized_proof []*big.Int) (bool, error) {
	return _KeyedPlonkVerifier.Contract.VerifySerializedProof(&_KeyedPlonkVerifier.CallOpts, public_inputs, serialized_proof)
}

// VerifySerializedProof is a free data retrieval call binding the contract method 0x330deb9f.
//
// Solidity: function verify_serialized_proof(uint256[] public_inputs, uint256[] serialized_proof) view returns(bool)
func (_KeyedPlonkVerifier *KeyedPlonkVerifierCallerSession) VerifySerializedProof(public_inputs []*big.Int, serialized_proof []*big.Int) (bool, error) {
	return _KeyedPlonkVerifier.Contract.VerifySerializedProof(&_KeyedPlonkVerifier.CallOpts, public_inputs, serialized_proof)
}

// PairingsBn254MetaData contains all meta data concerning the PairingsBn254 contract.
var PairingsBn254MetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c4e15e690fba1ba662e10b9ea6c4ba6993832a1892859903e7400cd5e34ef74464736f6c63430008110033",
}

// PairingsBn254ABI is the input ABI used to generate the binding from.
// Deprecated: Use PairingsBn254MetaData.ABI instead.
var PairingsBn254ABI = PairingsBn254MetaData.ABI

// PairingsBn254Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PairingsBn254MetaData.Bin instead.
var PairingsBn254Bin = PairingsBn254MetaData.Bin

// DeployPairingsBn254 deploys a new Ethereum contract, binding an instance of PairingsBn254 to it.
func DeployPairingsBn254(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PairingsBn254, error) {
	parsed, err := PairingsBn254MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PairingsBn254Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PairingsBn254{PairingsBn254Caller: PairingsBn254Caller{contract: contract}, PairingsBn254Transactor: PairingsBn254Transactor{contract: contract}, PairingsBn254Filterer: PairingsBn254Filterer{contract: contract}}, nil
}

// PairingsBn254 is an auto generated Go binding around an Ethereum contract.
type PairingsBn254 struct {
	PairingsBn254Caller     // Read-only binding to the contract
	PairingsBn254Transactor // Write-only binding to the contract
	PairingsBn254Filterer   // Log filterer for contract events
}

// PairingsBn254Caller is an auto generated read-only Go binding around an Ethereum contract.
type PairingsBn254Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairingsBn254Transactor is an auto generated write-only Go binding around an Ethereum contract.
type PairingsBn254Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairingsBn254Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PairingsBn254Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairingsBn254Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PairingsBn254Session struct {
	Contract     *PairingsBn254    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PairingsBn254CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PairingsBn254CallerSession struct {
	Contract *PairingsBn254Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PairingsBn254TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PairingsBn254TransactorSession struct {
	Contract     *PairingsBn254Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PairingsBn254Raw is an auto generated low-level Go binding around an Ethereum contract.
type PairingsBn254Raw struct {
	Contract *PairingsBn254 // Generic contract binding to access the raw methods on
}

// PairingsBn254CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PairingsBn254CallerRaw struct {
	Contract *PairingsBn254Caller // Generic read-only contract binding to access the raw methods on
}

// PairingsBn254TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PairingsBn254TransactorRaw struct {
	Contract *PairingsBn254Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPairingsBn254 creates a new instance of PairingsBn254, bound to a specific deployed contract.
func NewPairingsBn254(address common.Address, backend bind.ContractBackend) (*PairingsBn254, error) {
	contract, err := bindPairingsBn254(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PairingsBn254{PairingsBn254Caller: PairingsBn254Caller{contract: contract}, PairingsBn254Transactor: PairingsBn254Transactor{contract: contract}, PairingsBn254Filterer: PairingsBn254Filterer{contract: contract}}, nil
}

// NewPairingsBn254Caller creates a new read-only instance of PairingsBn254, bound to a specific deployed contract.
func NewPairingsBn254Caller(address common.Address, caller bind.ContractCaller) (*PairingsBn254Caller, error) {
	contract, err := bindPairingsBn254(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PairingsBn254Caller{contract: contract}, nil
}

// NewPairingsBn254Transactor creates a new write-only instance of PairingsBn254, bound to a specific deployed contract.
func NewPairingsBn254Transactor(address common.Address, transactor bind.ContractTransactor) (*PairingsBn254Transactor, error) {
	contract, err := bindPairingsBn254(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PairingsBn254Transactor{contract: contract}, nil
}

// NewPairingsBn254Filterer creates a new log filterer instance of PairingsBn254, bound to a specific deployed contract.
func NewPairingsBn254Filterer(address common.Address, filterer bind.ContractFilterer) (*PairingsBn254Filterer, error) {
	contract, err := bindPairingsBn254(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PairingsBn254Filterer{contract: contract}, nil
}

// bindPairingsBn254 binds a generic wrapper to an already deployed contract.
func bindPairingsBn254(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PairingsBn254ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PairingsBn254 *PairingsBn254Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PairingsBn254.Contract.PairingsBn254Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PairingsBn254 *PairingsBn254Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PairingsBn254.Contract.PairingsBn254Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PairingsBn254 *PairingsBn254Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PairingsBn254.Contract.PairingsBn254Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PairingsBn254 *PairingsBn254CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PairingsBn254.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PairingsBn254 *PairingsBn254TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PairingsBn254.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PairingsBn254 *PairingsBn254TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PairingsBn254.Contract.contract.Transact(opts, method, params...)
}

// PlonkVerifierMetaData contains all meta data concerning the PlonkVerifier contract.
var PlonkVerifierMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200e304c7032a405a4d48383b8de366ee8c74eb531d6ea1625fa7c8e363cf3b77d64736f6c63430008110033",
}

// PlonkVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use PlonkVerifierMetaData.ABI instead.
var PlonkVerifierABI = PlonkVerifierMetaData.ABI

// PlonkVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PlonkVerifierMetaData.Bin instead.
var PlonkVerifierBin = PlonkVerifierMetaData.Bin

// DeployPlonkVerifier deploys a new Ethereum contract, binding an instance of PlonkVerifier to it.
func DeployPlonkVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PlonkVerifier, error) {
	parsed, err := PlonkVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PlonkVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PlonkVerifier{PlonkVerifierCaller: PlonkVerifierCaller{contract: contract}, PlonkVerifierTransactor: PlonkVerifierTransactor{contract: contract}, PlonkVerifierFilterer: PlonkVerifierFilterer{contract: contract}}, nil
}

// PlonkVerifier is an auto generated Go binding around an Ethereum contract.
type PlonkVerifier struct {
	PlonkVerifierCaller     // Read-only binding to the contract
	PlonkVerifierTransactor // Write-only binding to the contract
	PlonkVerifierFilterer   // Log filterer for contract events
}

// PlonkVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type PlonkVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PlonkVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PlonkVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PlonkVerifierSession struct {
	Contract     *PlonkVerifier    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PlonkVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PlonkVerifierCallerSession struct {
	Contract *PlonkVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PlonkVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PlonkVerifierTransactorSession struct {
	Contract     *PlonkVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PlonkVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type PlonkVerifierRaw struct {
	Contract *PlonkVerifier // Generic contract binding to access the raw methods on
}

// PlonkVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PlonkVerifierCallerRaw struct {
	Contract *PlonkVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// PlonkVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PlonkVerifierTransactorRaw struct {
	Contract *PlonkVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPlonkVerifier creates a new instance of PlonkVerifier, bound to a specific deployed contract.
func NewPlonkVerifier(address common.Address, backend bind.ContractBackend) (*PlonkVerifier, error) {
	contract, err := bindPlonkVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PlonkVerifier{PlonkVerifierCaller: PlonkVerifierCaller{contract: contract}, PlonkVerifierTransactor: PlonkVerifierTransactor{contract: contract}, PlonkVerifierFilterer: PlonkVerifierFilterer{contract: contract}}, nil
}

// NewPlonkVerifierCaller creates a new read-only instance of PlonkVerifier, bound to a specific deployed contract.
func NewPlonkVerifierCaller(address common.Address, caller bind.ContractCaller) (*PlonkVerifierCaller, error) {
	contract, err := bindPlonkVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PlonkVerifierCaller{contract: contract}, nil
}

// NewPlonkVerifierTransactor creates a new write-only instance of PlonkVerifier, bound to a specific deployed contract.
func NewPlonkVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*PlonkVerifierTransactor, error) {
	contract, err := bindPlonkVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PlonkVerifierTransactor{contract: contract}, nil
}

// NewPlonkVerifierFilterer creates a new log filterer instance of PlonkVerifier, bound to a specific deployed contract.
func NewPlonkVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*PlonkVerifierFilterer, error) {
	contract, err := bindPlonkVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PlonkVerifierFilterer{contract: contract}, nil
}

// bindPlonkVerifier binds a generic wrapper to an already deployed contract.
func bindPlonkVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PlonkVerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PlonkVerifier *PlonkVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PlonkVerifier.Contract.PlonkVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PlonkVerifier *PlonkVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PlonkVerifier.Contract.PlonkVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PlonkVerifier *PlonkVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PlonkVerifier.Contract.PlonkVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PlonkVerifier *PlonkVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PlonkVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PlonkVerifier *PlonkVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PlonkVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PlonkVerifier *PlonkVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PlonkVerifier.Contract.contract.Transact(opts, method, params...)
}

// TranscriptLibraryMetaData contains all meta data concerning the TranscriptLibrary contract.
var TranscriptLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffa5014ad9af644dd9fb7dba283aae050da15950073703bca1e7a498942e9e5264736f6c63430008110033",
}

// TranscriptLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use TranscriptLibraryMetaData.ABI instead.
var TranscriptLibraryABI = TranscriptLibraryMetaData.ABI

// TranscriptLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TranscriptLibraryMetaData.Bin instead.
var TranscriptLibraryBin = TranscriptLibraryMetaData.Bin

// DeployTranscriptLibrary deploys a new Ethereum contract, binding an instance of TranscriptLibrary to it.
func DeployTranscriptLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TranscriptLibrary, error) {
	parsed, err := TranscriptLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TranscriptLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TranscriptLibrary{TranscriptLibraryCaller: TranscriptLibraryCaller{contract: contract}, TranscriptLibraryTransactor: TranscriptLibraryTransactor{contract: contract}, TranscriptLibraryFilterer: TranscriptLibraryFilterer{contract: contract}}, nil
}

// TranscriptLibrary is an auto generated Go binding around an Ethereum contract.
type TranscriptLibrary struct {
	TranscriptLibraryCaller     // Read-only binding to the contract
	TranscriptLibraryTransactor // Write-only binding to the contract
	TranscriptLibraryFilterer   // Log filterer for contract events
}

// TranscriptLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TranscriptLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TranscriptLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TranscriptLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TranscriptLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TranscriptLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TranscriptLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TranscriptLibrarySession struct {
	Contract     *TranscriptLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// TranscriptLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TranscriptLibraryCallerSession struct {
	Contract *TranscriptLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// TranscriptLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TranscriptLibraryTransactorSession struct {
	Contract     *TranscriptLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// TranscriptLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TranscriptLibraryRaw struct {
	Contract *TranscriptLibrary // Generic contract binding to access the raw methods on
}

// TranscriptLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TranscriptLibraryCallerRaw struct {
	Contract *TranscriptLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// TranscriptLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TranscriptLibraryTransactorRaw struct {
	Contract *TranscriptLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTranscriptLibrary creates a new instance of TranscriptLibrary, bound to a specific deployed contract.
func NewTranscriptLibrary(address common.Address, backend bind.ContractBackend) (*TranscriptLibrary, error) {
	contract, err := bindTranscriptLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TranscriptLibrary{TranscriptLibraryCaller: TranscriptLibraryCaller{contract: contract}, TranscriptLibraryTransactor: TranscriptLibraryTransactor{contract: contract}, TranscriptLibraryFilterer: TranscriptLibraryFilterer{contract: contract}}, nil
}

// NewTranscriptLibraryCaller creates a new read-only instance of TranscriptLibrary, bound to a specific deployed contract.
func NewTranscriptLibraryCaller(address common.Address, caller bind.ContractCaller) (*TranscriptLibraryCaller, error) {
	contract, err := bindTranscriptLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TranscriptLibraryCaller{contract: contract}, nil
}

// NewTranscriptLibraryTransactor creates a new write-only instance of TranscriptLibrary, bound to a specific deployed contract.
func NewTranscriptLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*TranscriptLibraryTransactor, error) {
	contract, err := bindTranscriptLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TranscriptLibraryTransactor{contract: contract}, nil
}

// NewTranscriptLibraryFilterer creates a new log filterer instance of TranscriptLibrary, bound to a specific deployed contract.
func NewTranscriptLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*TranscriptLibraryFilterer, error) {
	contract, err := bindTranscriptLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TranscriptLibraryFilterer{contract: contract}, nil
}

// bindTranscriptLibrary binds a generic wrapper to an already deployed contract.
func bindTranscriptLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TranscriptLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TranscriptLibrary *TranscriptLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TranscriptLibrary.Contract.TranscriptLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TranscriptLibrary *TranscriptLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TranscriptLibrary.Contract.TranscriptLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TranscriptLibrary *TranscriptLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TranscriptLibrary.Contract.TranscriptLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TranscriptLibrary *TranscriptLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TranscriptLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TranscriptLibrary *TranscriptLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TranscriptLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TranscriptLibrary *TranscriptLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TranscriptLibrary.Contract.contract.Transact(opts, method, params...)
}
